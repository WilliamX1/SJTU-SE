# Huidong Xu
# 519021910861
# Execution begins at address 0
	.pos 0
	irmovq stack, %rsp	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program

# Sample linked list
	.align 8
ele1:
	.quad 0x00a
	.quad ele2
ele2:
	.quad 0x0b0
	.quad ele3
ele3:
	.quad 0xc00
	.quad 0

main:	irmovq ele1, %rdi
	call sum_list
	ret	

# long sum_list(list_ptr ls)
# ls in %rdi
sum_list:	irmovq $8, %r8		# Constant 8
		xorq %rax, %rax		# sum = 0
loop:		andq %rdi, %rdi		# Set condition codes
		je	return		# If ls = 0, return
		mrmovq (%rdi), %rbx	# get ls->val
		addq %rbx, %rax		# val += ls->val
		addq %r8, %rdi
		mrmovq (%rdi), %rbx	# get ls->next
		rrmovq %rbx, %rdi	# ls = ls->next
		jmp loop
return:
		ret

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:

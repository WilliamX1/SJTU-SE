# Huidong Xu
# 519021910861
# Execution begins at address 0
	.pos 0
	irmovq stack, %rsp	# Set up stack pointer
	call main		# Execution main program
	halt			# Terminate program

.align 8
# Source block
src:
	.quad 0x00a
	.quad 0x0b0
	.quad 0xc00
# Destination block
dest:
	.quad 0x111
	.quad 0x222
	.quad 0x333

main:	irmovq src, %rdi
	irmovq dest, %rsi
	irmovq $3, %rdx
	call copy_block
	ret

# long copy_block(long *src, long *dest, long len)
# src in %rdi, dest in %rsi, len in %rdx
copy_block:	irmovq $1, %r8		# Constant 1
		irmovq $8, %r9		# Constant 8
		xorq %rax, %rax		# result = 0
loop:		andq %rdx, %rdx		# Set conditional CC
		je return		# if len <= 0, return
		mrmovq (%rdi), %rbx	# val = *src
​		rmmovq %rbx, (%rsi)	# *dest = val
​		addq %r9, %rdi		# src++
​		addq %r9, %rsi		# dest++		
​		xorq %rbx, %rax		# result ^= val
​		subq %r8, %rdx		# len-- 
​		jmp loop
return:
​		ret

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:

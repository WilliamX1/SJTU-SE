#/* $begin code-yso */
#/* $begin code-ysa */
# Execution begins at address 0 
	.pos 0 
init:	irmovq Stack, %rsp  	# Set up stack pointer  
	irmovq Stack, %rbp  	# Set up base pointer   
	call Main		# Execute main program
	halt			# Terminate program 

# Array of 4 elements
	.align 8 	
array:	.quad 0xd
	.quad 0xc0
	.quad 0xb00
	.quad 0xa000	

Main:	pushq %rbp 
	rrmovq %rsp,%rbp
	irmovq $4,%rax	
	pushq %rax		# Push 4
	irmovq array,%rdx
	pushq %rdx      	# Push array
	call Sum		# Sum(array, 4)
	rrmovq %rbp,%rsp
	popq %rbp
	ret 

#/* $begin sum-ys 0 */
	# int Sum(int *Start, int Count)
Sum:	pushq %rbp
	rrmovq %rsp,%rbp
	mrmovq 16(%rbp),%rcx 	# rcx = Start
	mrmovq 24(%rbp),%rdx	# rdx = Count
	xorq %rax,%rax		# sum = 0
	andq   %rdx,%rdx	# Set condition codes
	je     End
Loop:	mrmovq (%rcx),%rsi	# get *Start
	addq %rsi,%rax          # add to sum
	irmovq $8,%rbx          # 
	addq %rbx,%rcx          # Start++
	irmovq $-1,%rbx	        # 
	addq %rbx,%rdx          # Count--
	jne    Loop             # Stop when 0
End:	rrmovq %rbp,%rsp
	popq %rbp
	ret
#/* $end sum-ys 0 */

# The stack starts here and grows to lower addresses
	.pos 0x200		
Stack:	 
#/* $end code-ysa */
#/* $end code-yso */

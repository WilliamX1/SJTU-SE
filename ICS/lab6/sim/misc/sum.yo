                            | # HuidongXu
                            | # 519021910861
                            | # Execution begins at address 0
0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq stack, %rsp	# Set up stack pointer
0x00a: 804800000000000000   | 	call main		# Execute main program
0x013: 00                   | 	halt			# Terminate program
                            | 
                            | # Sample linked list
0x018:                      | 	.align 8
0x018:                      | ele1:
0x018: 0a00000000000000     | 	.quad 0x00a
0x020: 2800000000000000     | 	.quad ele2
0x028:                      | ele2:
0x028: b000000000000000     | 	.quad 0x0b0
0x030: 3800000000000000     | 	.quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     | 	.quad 0xc00
0x040: 0000000000000000     | 	.quad 0
                            | 
0x048: 30f71800000000000000 | main:	irmovq ele1, %rdi
0x052: 805c00000000000000   | 	call sum_list
0x05b: 90                   | 	ret	
                            | 
                            | # long sum_list(list_ptr ls)
                            | # ls in %rdi
0x05c: 30f80800000000000000 | sum_list:	irmovq $8, %r8		# Constant 8
0x066: 6300                 | 		xorq %rax, %rax		# sum = 0
0x068: 6277                 | loop:		andq %rdi, %rdi		# Set condition codes
0x06a: 739600000000000000   | 		je	return		# If ls = 0, return
0x073: 50370000000000000000 | 		mrmovq (%rdi), %rbx	# get ls->val
0x07d: 6030                 | 		addq %rbx, %rax		# val += ls->val
0x07f: 6087                 | 		addq %r8, %rdi
0x081: 50370000000000000000 | 		mrmovq (%rdi), %rbx	# get ls->next
0x08b: 2037                 | 		rrmovq %rbx, %rdi	# ls = ls->next
0x08d: 706800000000000000   | 		jmp loop
0x096:                      | return:
0x096: 90                   | 		ret
                            | 
                            | # Stack starts here and grows to lower addresses
0x200:                      | 	.pos 0x200
0x200:                      | stack:

                            | #######################################################################
                            | # Test for copying block of size K;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4a002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f2ffffffffffffffff | 	irmovq $K, %rdx		# src and dst have K elements
0x014: 30f61802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f70002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 809900000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: 6222                 | 	andq %rdx, %rdx		# len <= 0
0x03f: 719800000000000000   | 	jle Done		# if so, goto Done
                            | 
0x048: 50a70000000000000000 | Loop:	mrmovq (%rdi), %r10	# read val from src
0x052: 40a60000000000000000 | 	rmmovq %r10, (%rsi) 	# ...and store it to dst
0x05c: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x05e: 717300000000000000   | 	jle Npos		# if so, goto Nops:
0x067: 30fa0100000000000000 | 	irmovq $1, %r10
0x071: 60a0                 | 	addq %r10, %rax		# count++
                            | 
0x073: 30fa0100000000000000 | Npos:	irmovq $1, %r10
0x07d: 61a2                 | 	subq %r10, %rdx		# len--
0x07f: 30fa0800000000000000 | 	irmovq $8, %r10
0x089: 60a7                 | 	addq %r10, %rdi		# src++
0x08b: 60a6                 | 	addq %r10, %rsi		# dst++
0x08d: 6222                 | 	andq %rdx, %rdx		# len > 0?
0x08f: 764800000000000000   | 	jg Loop			# if so, goto Loop:
                            | 	
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x098:                      | Done:
0x098: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x099:                      | End:
                            | #/* $end ncopy-ys */
0x099:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x099:                      | check:
                            | 	# Return value test
0x099: 30fa0000000000000000 | 	irmovq $0,%r10
0x0a3: 61a0                 | 	subq %r10,%rax
0x0a5: 73c100000000000000   | 	je checkb
0x0ae: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x0b8: 70ff01000000000000   | 	jmp cdone
0x0c1:                      | checkb:
                            | 	# Code length check
0x0c1: 30f09900000000000000 | 	irmovq EndFun,%rax
0x0cb: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x0d5: 6120                 | 	subq %rdx,%rax
0x0d7: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x0e1: 6102                 | 	subq %rax,%rdx
0x0e3: 75ff00000000000000   | 	jge checkm
0x0ec: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x0f6: 70ff01000000000000   | 	jmp cdone
0x0ff:                      | checkm:
0x0ff: 30f21802000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x109: 30f30002000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x113: 30f7ffffffffffffffff | 	irmovq $K,%rdi  # Count
0x11d: 6277                 | 	andq %rdi,%rdi
0x11f: 737d01000000000000   | 	je checkpre         # Skip check if count = 0
0x128:                      | mcloop:
0x128: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x132: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x13c: 6160                 | 	subq %rsi,%rax
0x13e: 735a01000000000000   | 	je  mok
0x147: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x151: 70ff01000000000000   | 	jmp cdone
0x15a:                      | mok:
0x15a: 30f00800000000000000 | 	irmovq $8,%rax
0x164: 6002                 | 	addq %rax,%rdx	  # dest ++
0x166: 6003                 | 	addq %rax,%rbx    # src++
0x168: 30f00100000000000000 | 	irmovq $1,%rax
0x172: 6107                 | 	subq %rax,%rdi    # cnt--
0x174: 762801000000000000   | 	jg mcloop
0x17d:                      | checkpre:
                            | 	# Check for corruption
0x17d: 30f21002000000000000 | 	irmovq Predest,%rdx
0x187: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x191: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x19b: 6120                 | 	subq %rdx,%rax
0x19d: 73b901000000000000   | 	je checkpost
0x1a6: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x1b0: 70ff01000000000000   | 	jmp cdone
0x1b9:                      | checkpost:
                            | 	# Check for corruption
0x1b9: 30f21802000000000000 | 	irmovq Postdest,%rdx
0x1c3: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x1cd: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x1d7: 6120                 | 	subq %rdx,%rax
0x1d9: 73f501000000000000   | 	je checkok
0x1e2: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x1ec: 70ff01000000000000   | 	jmp cdone
0x1f5:                      | checkok:
                            | 	# Successful checks
0x1f5: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x1ff:                      | cdone:
0x1ff: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x200:                      | 	.align 8
0x200:                      | src:
0x200: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x210:                      | 	.align 16
0x210:                      | Predest:
0x210: fadebc0000000000     | 	.quad 0xbcdefa
0x218:                      | dest:
0x218:                      | Postdest:
0x218: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x220:                      | .align 8
                            | # Run time stack
0x220: 0000000000000000     | 	.quad 0
0x228: 0000000000000000     | 	.quad 0
0x230: 0000000000000000     | 	.quad 0
0x238: 0000000000000000     | 	.quad 0
0x240: 0000000000000000     | 	.quad 0
0x248: 0000000000000000     | 	.quad 0
0x250: 0000000000000000     | 	.quad 0
0x258: 0000000000000000     | 	.quad 0
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
0x270: 0000000000000000     | 	.quad 0
0x278: 0000000000000000     | 	.quad 0
0x280: 0000000000000000     | 	.quad 0
0x288: 0000000000000000     | 	.quad 0
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
                            | 
0x2a0:                      | Stack:

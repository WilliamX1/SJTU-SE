                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4f004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f64804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Huidong Xu
                            | # 519021910861
                            | # Describe how and why you modified the baseline code.
                            | # 1. use the instruction 'iaddq' to reduce addition and subtraction operation.
                            | # 2. unroll the loop, when len >= 8, it will calculate 8 sets of data at the same time, so it
                            | #    can avoid some use/load hazard.
                            | # 3. use jump table when len < 8, read two instuctions and write back one, so it can break the
                            | #    bubble between one read from memory and one write back to memory.
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# judge length
0x032:                      | Judge8:
0x032: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# len - 8
0x03c: 755402000000000000   | 	jge Loop8		# if len >= 8, start the loop8
                            | 	
0x045: 6022                 | 	addq %rdx, %rdx
0x047: 6022                 | 	addq %rdx, %rdx
0x049: 6022                 | 	addq %rdx, %rdx		# %rdx * 8
                            | 
0x04b: 50120004000000000000 | 	mrmovq Jump(%rdx), %rcx
0x055: a01f                 | 	pushq %rcx
0x057: 90                   | 	ret
0x058:                      | L1:
                            | 	# read value from src and store it to dst
0x058: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x062: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x06c: 6288                 | 	andq %r8, %r8	# val <= 0?
0x06e: 710804000000000000   | 	jle Done	# if so, return:
0x077: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x081: 90                   | 	ret
0x082:                      | L2:
                            | 	# read value from src and store it to dst
0x082: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x08c: 50870000000000000000 | L22:	mrmovq (%rdi), %r8
0x096: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x0a0: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x0aa: 6299                 | 	andq %r9, %r9	# val <= 0?
0x0ac: 71bf00000000000000   | 	jle L20	# if so, goto L20:
0x0b5: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x0bf: 6288                 | L20:	andq %r8, %r8	# val <= 0?
0x0c1: 710804000000000000   | 	jle Done	# if so, return:
0x0ca: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x0d4: 90                   | 	ret
0x0d5:                      | L3:	
                            | 	# read value from src and store it to dst
0x0d5: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x0df: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x0e9: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0f3: 62aa                 | 	andq %r10, %r10	# val <= 0?
0x0f5: 718c00000000000000   | 	jle L22		# if so, goto L22:
0x0fe: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x108: 708c00000000000000   | 	jmp L22
0x111:                      | L4:	
                            | 	# read value from src and store it to dst
0x111: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x11b: 50a71000000000000000 | L44:	mrmovq 16(%rdi), %r10
0x125: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x12f: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x139: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x143: 62bb                 | 	andq %r11, %r11	# val <= 0?
0x145: 715801000000000000   | 	jle L40		# if so, goto L40:
0x14e: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x158: 62aa                 | L40:	andq %r10, %r10 # val <= 0?
0x15a: 718c00000000000000   | 	jle L22		# if so, goto L22:
0x163: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x16d: 708c00000000000000   | 	jmp L22	
0x176:                      | L5:	
                            | 	# read value from src and store it to dst
0x176: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x180: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x18a: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x194: 62cc                 | 	andq %r12, %r12	# val <= 0?
0x196: 711b01000000000000   | 	jle L44		# if so, goto L44:
0x19f: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x1a9: 701b01000000000000   | 	jmp L44
0x1b2:                      | L6:	
                            | 	# read value from src and store it to dst
0x1b2: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x1bc: 50c72000000000000000 | L66:	mrmovq 32(%rdi), %r12
0x1c6: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x1d0: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x1da: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x1e4: 62dd                 | 	andq %r13, %r13	# val <= 0?
0x1e6: 71f901000000000000   | 	jle L60		# if so, goto L60:
0x1ef: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x1f9: 62cc                 | L60:	andq %r12, %r12	# val <= 0?
0x1fb: 711b01000000000000   | 	jle L44		# if so, goto L44:
0x204: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x20e: 701b01000000000000   | 	jmp L44
0x217:                      | L7:	
                            | 	# read value from src and store it to dst
0x217: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14
0x221: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x22b: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x235: 62ee                 | 	andq %r14, %r14	# val <= 0?
0x237: 71bc01000000000000   | 	jle L66		# if so, goto L66:
0x240: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x24a: 70bc01000000000000   | 	jmp L66
0x253:                      | L8:
0x253: 90                   | 	ret
                            | # len >= 8
0x254:                      | Loop8:
                            | 	# read value from src and store it to dst
0x254: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x25e: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x268: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x272: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x27c: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x286: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x290: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14
0x29a: 50173800000000000000 | 	mrmovq 56(%rdi), %rcx
                            | 
0x2a4: c0f74000000000000000 | 	iaddq $64, %rdi		# src += 64
0x2ae: c0f64000000000000000 | 	iaddq $64, %rsi		# dst += 64
                            | 
0x2b8: 4086c0ffffffffffffff | 	rmmovq %r8, -64(%rsi)
0x2c2: 4096c8ffffffffffffff | 	rmmovq %r9, -56(%rsi)
0x2cc: 40a6d0ffffffffffffff | 	rmmovq %r10, -48(%rsi)
0x2d6: 40b6d8ffffffffffffff | 	rmmovq %r11, -40(%rsi)
0x2e0: 40c6e0ffffffffffffff | 	rmmovq %r12, -32(%rsi)
0x2ea: 40d6e8ffffffffffffff | 	rmmovq %r13, -24(%rsi)
0x2f4: 40e6f0ffffffffffffff | 	rmmovq %r14, -16(%rsi)
0x2fe: 4016f8ffffffffffffff | 	rmmovq %rcx, -8(%rsi)
                            | 	# count positive interger
0x308: 6288                 | 	andq %r8, %r8	# val <= 0?
0x30a: 711d03000000000000   | 	jle Npos1	# if so, goto Npos1:
0x313: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x31d:                      | Npos1:
0x31d: 6299                 | 	andq %r9, %r9	# val <= 0?
0x31f: 713203000000000000   | 	jle Npos2	# if so, goto Npos2
0x328: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x332:                      | Npos2:
0x332: 62aa                 | 	andq %r10, %r10	# val <= 0?
0x334: 714703000000000000   | 	jle Npos3	# if so, goto Npos3
0x33d: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x347:                      | Npos3:
0x347: 62bb                 | 	andq %r11, %r11	# val <= 0?
0x349: 715c03000000000000   | 	jle Npos4	# if so, goto Npos4
0x352: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x35c:                      | Npos4:
0x35c: 62cc                 | 	andq %r12, %r12	# val <= 0?
0x35e: 717103000000000000   | 	jle Npos5	# if so, goto Npos5
0x367: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x371:                      | Npos5:
0x371: 62dd                 | 	andq %r13, %r13	# val <= 0?
0x373: 718603000000000000   | 	jle Npos6	# if so, goto Npos6
0x37c: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x386:                      | Npos6:
0x386: 62ee                 | 	andq %r14, %r14	# val <= 0?
0x388: 719b03000000000000   | 	jle Npos7	# if so, goto Npos7
0x391: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x39b:                      | Npos7:
0x39b: 6211                 | 	andq %rcx, %rcx	# val <= 0?
0x39d: 713200000000000000   | 	jle Judge8	# if so, goto Judge8
0x3a6: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x3b0: 703200000000000000   | 	jmp Judge8
                            | 
                            | # Jump table
0x3c0:                      | 	.align 8
0x3c0: 5302000000000000     | 	.quad L8
0x3c8: 5800000000000000     | 	.quad L1
0x3d0: 8200000000000000     | 	.quad L2
0x3d8: d500000000000000     | 	.quad L3
0x3e0: 1101000000000000     | 	.quad L4
0x3e8: 7601000000000000     | 	.quad L5
0x3f0: b201000000000000     | 	.quad L6
0x3f8: 1702000000000000     | 	.quad L7
0x400: 5302000000000000     | Jump:	.quad L8
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x408:                      | Done:
0x408: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x409:                      | End:
                            | #/* $end ncopy-ys */
0x409:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x410:                      | 	.align 8
0x410:                      | src:
0x410: ffffffffffffffff     | 	.quad -1
0x418: 0200000000000000     | 	.quad 2
0x420: fdffffffffffffff     | 	.quad -3
0x428: 0400000000000000     | 	.quad 4
0x430: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x440:                      | 	.align 16
0x440:                      | Predest:
0x440: fadebc0000000000     | 	.quad 0xbcdefa
0x448:                      | dest:
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468:                      | Postdest:
0x468: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x470:                      | .align 8
                            | # Run time stack
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
0x4e0: 0000000000000000     | 	.quad 0
0x4e8: 0000000000000000     | 	.quad 0
                            | 
0x4f0:                      | Stack:

                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f49808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f61806000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Huidong Xu
                            | # 519021910861
                            | # Describe how and why you modified the baseline code.
                            | # 1. use the instruction 'iaddq' to reduce addition and subtraction operation.
                            | # 2. unroll the loop, when len >= 8, it will calculate 8 sets of data at the same time, so it
                            | #    can avoid some use/load hazard.
                            | # 3. use jump table when len < 8, read two instuctions and write back one, so it can break the
                            | #    bubble between one read from memory and one write back to memory.
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# judge length
0x032:                      | Judge8:
0x032: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# len - 8
0x03c: 755402000000000000   | 	jge Loop8		# if len >= 8, start the loop8
                            | 	
0x045: 6022                 | 	addq %rdx, %rdx
0x047: 6022                 | 	addq %rdx, %rdx
0x049: 6022                 | 	addq %rdx, %rdx		# %rdx * 8
                            | 
0x04b: 50120004000000000000 | 	mrmovq Jump(%rdx), %rcx
0x055: a01f                 | 	pushq %rcx
0x057: 90                   | 	ret
0x058:                      | L1:
                            | 	# read value from src and store it to dst
0x058: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x062: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x06c: 6288                 | 	andq %r8, %r8	# val <= 0?
0x06e: 710804000000000000   | 	jle Done	# if so, return:
0x077: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x081: 90                   | 	ret
0x082:                      | L2:
                            | 	# read value from src and store it to dst
0x082: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x08c: 50870000000000000000 | L22:	mrmovq (%rdi), %r8
0x096: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x0a0: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x0aa: 6299                 | 	andq %r9, %r9	# val <= 0?
0x0ac: 71bf00000000000000   | 	jle L20	# if so, goto L20:
0x0b5: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x0bf: 6288                 | L20:	andq %r8, %r8	# val <= 0?
0x0c1: 710804000000000000   | 	jle Done	# if so, return:
0x0ca: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x0d4: 90                   | 	ret
0x0d5:                      | L3:	
                            | 	# read value from src and store it to dst
0x0d5: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x0df: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x0e9: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0f3: 62aa                 | 	andq %r10, %r10	# val <= 0?
0x0f5: 718c00000000000000   | 	jle L22		# if so, goto L22:
0x0fe: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x108: 708c00000000000000   | 	jmp L22
0x111:                      | L4:	
                            | 	# read value from src and store it to dst
0x111: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x11b: 50a71000000000000000 | L44:	mrmovq 16(%rdi), %r10
0x125: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x12f: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x139: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x143: 62bb                 | 	andq %r11, %r11	# val <= 0?
0x145: 715801000000000000   | 	jle L40		# if so, goto L40:
0x14e: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x158: 62aa                 | L40:	andq %r10, %r10 # val <= 0?
0x15a: 718c00000000000000   | 	jle L22		# if so, goto L22:
0x163: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x16d: 708c00000000000000   | 	jmp L22	
0x176:                      | L5:	
                            | 	# read value from src and store it to dst
0x176: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x180: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x18a: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x194: 62cc                 | 	andq %r12, %r12	# val <= 0?
0x196: 711b01000000000000   | 	jle L44		# if so, goto L44:
0x19f: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x1a9: 701b01000000000000   | 	jmp L44
0x1b2:                      | L6:	
                            | 	# read value from src and store it to dst
0x1b2: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x1bc: 50c72000000000000000 | L66:	mrmovq 32(%rdi), %r12
0x1c6: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x1d0: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x1da: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x1e4: 62dd                 | 	andq %r13, %r13	# val <= 0?
0x1e6: 71f901000000000000   | 	jle L60		# if so, goto L60:
0x1ef: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x1f9: 62cc                 | L60:	andq %r12, %r12	# val <= 0?
0x1fb: 711b01000000000000   | 	jle L44		# if so, goto L44:
0x204: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x20e: 701b01000000000000   | 	jmp L44
0x217:                      | L7:	
                            | 	# read value from src and store it to dst
0x217: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14
0x221: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x22b: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x235: 62ee                 | 	andq %r14, %r14	# val <= 0?
0x237: 71bc01000000000000   | 	jle L66		# if so, goto L66:
0x240: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x24a: 70bc01000000000000   | 	jmp L66
0x253:                      | L8:
0x253: 90                   | 	ret
                            | # len >= 8
0x254:                      | Loop8:
                            | 	# read value from src and store it to dst
0x254: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x25e: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x268: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x272: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x27c: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x286: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x290: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14
0x29a: 50173800000000000000 | 	mrmovq 56(%rdi), %rcx
                            | 
0x2a4: c0f74000000000000000 | 	iaddq $64, %rdi		# src += 64
0x2ae: c0f64000000000000000 | 	iaddq $64, %rsi		# dst += 64
                            | 
0x2b8: 4086c0ffffffffffffff | 	rmmovq %r8, -64(%rsi)
0x2c2: 4096c8ffffffffffffff | 	rmmovq %r9, -56(%rsi)
0x2cc: 40a6d0ffffffffffffff | 	rmmovq %r10, -48(%rsi)
0x2d6: 40b6d8ffffffffffffff | 	rmmovq %r11, -40(%rsi)
0x2e0: 40c6e0ffffffffffffff | 	rmmovq %r12, -32(%rsi)
0x2ea: 40d6e8ffffffffffffff | 	rmmovq %r13, -24(%rsi)
0x2f4: 40e6f0ffffffffffffff | 	rmmovq %r14, -16(%rsi)
0x2fe: 4016f8ffffffffffffff | 	rmmovq %rcx, -8(%rsi)
                            | 	# count positive interger
0x308: 6288                 | 	andq %r8, %r8	# val <= 0?
0x30a: 711d03000000000000   | 	jle Npos1	# if so, goto Npos1:
0x313: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x31d:                      | Npos1:
0x31d: 6299                 | 	andq %r9, %r9	# val <= 0?
0x31f: 713203000000000000   | 	jle Npos2	# if so, goto Npos2
0x328: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x332:                      | Npos2:
0x332: 62aa                 | 	andq %r10, %r10	# val <= 0?
0x334: 714703000000000000   | 	jle Npos3	# if so, goto Npos3
0x33d: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x347:                      | Npos3:
0x347: 62bb                 | 	andq %r11, %r11	# val <= 0?
0x349: 715c03000000000000   | 	jle Npos4	# if so, goto Npos4
0x352: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x35c:                      | Npos4:
0x35c: 62cc                 | 	andq %r12, %r12	# val <= 0?
0x35e: 717103000000000000   | 	jle Npos5	# if so, goto Npos5
0x367: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x371:                      | Npos5:
0x371: 62dd                 | 	andq %r13, %r13	# val <= 0?
0x373: 718603000000000000   | 	jle Npos6	# if so, goto Npos6
0x37c: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x386:                      | Npos6:
0x386: 62ee                 | 	andq %r14, %r14	# val <= 0?
0x388: 719b03000000000000   | 	jle Npos7	# if so, goto Npos7
0x391: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x39b:                      | Npos7:
0x39b: 6211                 | 	andq %rcx, %rcx	# val <= 0?
0x39d: 713200000000000000   | 	jle Judge8	# if so, goto Judge8
0x3a6: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x3b0: 703200000000000000   | 	jmp Judge8
                            | 
                            | # Jump table
0x3c0:                      | 	.align 8
0x3c0: 5302000000000000     | 	.quad L8
0x3c8: 5800000000000000     | 	.quad L1
0x3d0: 8200000000000000     | 	.quad L2
0x3d8: d500000000000000     | 	.quad L3
0x3e0: 1101000000000000     | 	.quad L4
0x3e8: 7601000000000000     | 	.quad L5
0x3f0: b201000000000000     | 	.quad L6
0x3f8: 1702000000000000     | 	.quad L7
0x400: 5302000000000000     | Jump:	.quad L8
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x408:                      | Done:
0x408: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x409:                      | End:
                            | #/* $end ncopy-ys */
0x409:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x410:                      | 	.align 8
0x410:                      | src:
0x410: 0100000000000000     | 	.quad 1
0x418: feffffffffffffff     | 	.quad -2
0x420: 0300000000000000     | 	.quad 3
0x428: fcffffffffffffff     | 	.quad -4
0x430: 0500000000000000     | 	.quad 5
0x438: faffffffffffffff     | 	.quad -6
0x440: f9ffffffffffffff     | 	.quad -7
0x448: 0800000000000000     | 	.quad 8
0x450: 0900000000000000     | 	.quad 9
0x458: f6ffffffffffffff     | 	.quad -10
0x460: f5ffffffffffffff     | 	.quad -11
0x468: 0c00000000000000     | 	.quad 12
0x470: f3ffffffffffffff     | 	.quad -13
0x478: f2ffffffffffffff     | 	.quad -14
0x480: 0f00000000000000     | 	.quad 15
0x488: f0ffffffffffffff     | 	.quad -16
0x490: efffffffffffffff     | 	.quad -17
0x498: eeffffffffffffff     | 	.quad -18
0x4a0: edffffffffffffff     | 	.quad -19
0x4a8: ecffffffffffffff     | 	.quad -20
0x4b0: 1500000000000000     | 	.quad 21
0x4b8: eaffffffffffffff     | 	.quad -22
0x4c0: 1700000000000000     | 	.quad 23
0x4c8: e8ffffffffffffff     | 	.quad -24
0x4d0: 1900000000000000     | 	.quad 25
0x4d8: 1a00000000000000     | 	.quad 26
0x4e0: e5ffffffffffffff     | 	.quad -27
0x4e8: 1c00000000000000     | 	.quad 28
0x4f0: 1d00000000000000     | 	.quad 29
0x4f8: 1e00000000000000     | 	.quad 30
0x500: 1f00000000000000     | 	.quad 31
0x508: 2000000000000000     | 	.quad 32
0x510: 2100000000000000     | 	.quad 33
0x518: deffffffffffffff     | 	.quad -34
0x520: 2300000000000000     | 	.quad 35
0x528: 2400000000000000     | 	.quad 36
0x530: 2500000000000000     | 	.quad 37
0x538: daffffffffffffff     | 	.quad -38
0x540: d9ffffffffffffff     | 	.quad -39
0x548: 2800000000000000     | 	.quad 40
0x550: d7ffffffffffffff     | 	.quad -41
0x558: 2a00000000000000     | 	.quad 42
0x560: d5ffffffffffffff     | 	.quad -43
0x568: 2c00000000000000     | 	.quad 44
0x570: 2d00000000000000     | 	.quad 45
0x578: 2e00000000000000     | 	.quad 46
0x580: 2f00000000000000     | 	.quad 47
0x588: d0ffffffffffffff     | 	.quad -48
0x590: cfffffffffffffff     | 	.quad -49
0x598: ceffffffffffffff     | 	.quad -50
0x5a0: 3300000000000000     | 	.quad 51
0x5a8: ccffffffffffffff     | 	.quad -52
0x5b0: 3500000000000000     | 	.quad 53
0x5b8: 3600000000000000     | 	.quad 54
0x5c0: c9ffffffffffffff     | 	.quad -55
0x5c8: 3800000000000000     | 	.quad 56
0x5d0: 3900000000000000     | 	.quad 57
0x5d8: c6ffffffffffffff     | 	.quad -58
0x5e0: c5ffffffffffffff     | 	.quad -59
0x5e8: c4ffffffffffffff     | 	.quad -60
0x5f0: c3ffffffffffffff     | 	.quad -61
0x5f8: c2ffffffffffffff     | 	.quad -62
0x600: c1ffffffffffffff     | 	.quad -63
0x608: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x610:                      | 	.align 16
0x610:                      | Predest:
0x610: fadebc0000000000     | 	.quad 0xbcdefa
0x618:                      | dest:
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0: abefcd0000000000     | 	.quad 0xcdefab
0x7d8: abefcd0000000000     | 	.quad 0xcdefab
0x7e0: abefcd0000000000     | 	.quad 0xcdefab
0x7e8: abefcd0000000000     | 	.quad 0xcdefab
0x7f0: abefcd0000000000     | 	.quad 0xcdefab
0x7f8: abefcd0000000000     | 	.quad 0xcdefab
0x800: abefcd0000000000     | 	.quad 0xcdefab
0x808: abefcd0000000000     | 	.quad 0xcdefab
0x810:                      | Postdest:
0x810: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x818:                      | .align 8
                            | # Run time stack
0x818: 0000000000000000     | 	.quad 0
0x820: 0000000000000000     | 	.quad 0
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
0x838: 0000000000000000     | 	.quad 0
0x840: 0000000000000000     | 	.quad 0
0x848: 0000000000000000     | 	.quad 0
0x850: 0000000000000000     | 	.quad 0
0x858: 0000000000000000     | 	.quad 0
0x860: 0000000000000000     | 	.quad 0
0x868: 0000000000000000     | 	.quad 0
0x870: 0000000000000000     | 	.quad 0
0x878: 0000000000000000     | 	.quad 0
0x880: 0000000000000000     | 	.quad 0
0x888: 0000000000000000     | 	.quad 0
0x890: 0000000000000000     | 	.quad 0
                            | 
0x898:                      | Stack:
